
def looptagchecker():
    # Define resource list by service+resource
    resourcelist = [
        'AmazonmqBroker',
        'AmazonmqConfiguration',
        'AppstreamFleet',
        'AppstreamImageBulder',
        'AppstreamImageStack',
        'BraketQuantumTask',
        'CertificateManagerCertificate',
        'Cloud9Environment',
        'CloudFrontStreamingDistribution',
        'CloudFrontDistribution',
        'CloudTrailTrail',
        'CloudWatchAlarm',
        'CodeArtifactDomain',
        'CodeArtifactRepository',
        'CodeBuildProject',
        'CodeCommitRepository',
        'CodeGuruReviewerRepositoryAssociation',
        'CodePipelinePipeline',
        'CodePipelineWebhook',
        'CognitoIdentityPool',
        'CognitoUserPool',
        'ComprehendDocumentClassifier',
        'ComprehendEntityRecognizer',
        'ConfigConfigRule',
        'DataBrewJob',
        'DataBrewProject',
        'DataBrewRecipe',
        'DataBrewSchedule',
        'DataExchangeDataSet',
        'DataPipelinePipeline',
        'DynamoDBTable',
        'EC2CustomerGateway',
        'EC2DHCPOptions',
        'EC2Image',
        'EC2InternetGateway',
        'EC2NetworkInterface',
        'EC2ReservedInstance',
        'EC2NatGateway',
        'EC2NetworkAcl',
        'EC2RouteTable',
        'EC2EIP',
        'EC2SecurityGroup',
        'EC2Subnet',
        'EC2Instance',
        'EC2Snapshot',
        'EC2SpotInstanceRequest',
        'EC2VPC',
        'EC2VPNConnection',
        'EC2VPNGateway',
        'EC2Volume',
        'ECSCluster',
        'ECSTaskDefinition',
        'EFSFileSystem',
        'EKSCluster',
        'EMRCluster',
        'EMRContainersVirtualCluster',
        'ElasticCacheCacheCluster',
        'ElasticCacheSnapshot',
        'ElasticBeanstalkApplication',
        'ElasticInferenceElasticInferenceAccelerator',
        'ElasticLoadBalancingLoadBalancer',
        'ElasticLoadBalancingV2LoadBalancer',
        'ElasticLoadBalancingV2TargetGroup',
        'EventsRule',
        'FSxFileSystem',
        'ForecastDataset',
        'ForecastDatasetGroup',
        'ForecastForecast',
        'ForecastForecastExportJob',
        'ForecastPredictor',
        'ForecastPredictorBacktestExportJob',
        'FraudDetectorDetector',
        'FraudDetectorEntityType',
        'FraudDetectorEventType',
        'FraudDetectorExternalModel',
        'FraudDetectorLabel',
        'FraudDetectorModel',
        'FraudDetectorOutcome',
        'FraudDetectorVariable',
        'GlacierVault',
        'GlueCrawler',
        'GlueJob',
        'GlueTrigger',
        'GreengrassConnectorDefinition',
        'GreengrassCoreDefinition',
        'GreengrassDeviceDefinition',
        'GreengrassFunctionDefinition',
        'GreengrassGroup',
        'GreengrassLoggerDefinition',
        'GreengrassResourceDefinition',
        'GreengrassSubscriptionDefinition',
        'IAMInstanceProfile',
        'IAMManagedPolicy',
        'IAMOpenIDConnectProvider',
        'IAMSAMLProvider',
        'IAMServerCertificate',
        'IotAnalyticsDataset',
        'IoTEventsDetectorModel',
        'IoTEventsInput',
        'KMSKey',
        'KafkaCluster',
        'KinesisStream',
        'KinesisAnalyticsApplication',
        'MacieClassificationJob',
        'MacieCustomDataIdentifier',
        'MacieFindingsFilter',
        'MacieMember',
        'OpenSearchServiceDomain',
        'OrganizationsAccount',
        'OrganizationsRoot',
        'OrganizationsPolicy',
        'QLDBLedger',
        'RAMResourceShare',
        'RDSDBCluster',
        'RDSDBClusterParameterGroup',
        'RDSDBClusterSnapshot',
        'RDSDBInstance',
        'RDSDBParameterGroup',
        'RDSDBSecurityGroup',
        'RDSDBSnapshot',
        'RDSDBSubnetGroup',
        'RDSEventSubscription',
        'RDSOptionGroup',
        'RDSReservedDBInstance',
        'RedshiftCluster',
        'RedshiftClusterSubnetGroup',
        'RedshiftParameterGroup',
        'RedshiftHSMClientCertificate',
        'ResourceGroupsGroup',
        'RoboMakerRobotApplication',
        'RoboMakerSimulationApplication',
        'RoboMakerSimuationJob',
        'Route53Domain',
        'Route53HealthCheck',
        'Route53HostedZone',
        'Route53ResolverResolverEndpoint',
        'Route53ResolverResolverRule',
        'SageMakerNotebookInstance',
        'S3Bucket',
        'SecretsManagerSecret',
        'SESConfigurationSet',
        'SESContactList',
        'SESDedicatedIpPool',
        'SESIdentity',
        'SNSTopic',
        'SQSQueue',
        'SSMParameter',
        'StepFunctionsActivity',
        'StepFunctionsStateMachine',
        'StorageGatewayGateway',
        'WorkspacesWorkspace',
    ]
    return resourcelist

def checkresource(resourcetype):
    taglist = looptagchecker()
    for tag in taglist:
        if str(resourcetype).lower() == str(tag).lower():
            return True
    return False

